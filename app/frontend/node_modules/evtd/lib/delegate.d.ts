import { TrapEventMap } from './traps';
interface EventListenerOptions {
    capture?: boolean;
    once?: boolean;
}
declare const on: (<K extends keyof HTMLElementEventMap>(type: K, el: HTMLElement, handler: (e: HTMLElementEventMap[K]) => any, useCapture?: boolean | undefined) => void) & (<K_1 extends keyof HTMLElementEventMap>(type: K_1, el: HTMLElement, handler: (e: HTMLElementEventMap[K_1]) => any, options?: EventListenerOptions | undefined) => void) & (<K_2 extends keyof WindowEventMap>(type: K_2, el: Window, handler: (e: WindowEventMap[K_2]) => any, useCapture?: boolean | undefined) => void) & (<K_3 extends keyof WindowEventMap>(type: K_3, el: Window, handler: (e: WindowEventMap[K_3]) => any, options?: EventListenerOptions | undefined) => void) & (<K_4 extends keyof DocumentEventMap>(type: K_4, el: Document, handler: (e: DocumentEventMap[K_4]) => any, useCapture?: boolean | undefined) => void) & (<K_5 extends keyof DocumentEventMap>(type: K_5, el: Document, handler: (e: DocumentEventMap[K_5]) => any, options?: EventListenerOptions | undefined) => void) & (<K_6 extends keyof TrapEventMap>(type: K_6, el: HTMLElement, handler: (e: TrapEventMap[K_6]) => any, useCapture?: boolean | undefined) => void) & (<K_7 extends keyof TrapEventMap>(type: K_7, el: HTMLElement, handler: (e: TrapEventMap[K_7]) => any, options?: EventListenerOptions | undefined) => void) & ((type: String, el: EventTarget, handler: EventListener, useCapture?: boolean | undefined) => void) & ((type: String, el: EventTarget, handler: EventListener, useCapture?: boolean | undefined) => void) & ((type: String, el: EventTarget, handler: EventListener, options?: EventListenerOptions | undefined) => void), off: (<K extends keyof HTMLElementEventMap>(type: K, el: HTMLElement, handler: (e: HTMLElementEventMap[K]) => any, useCapture?: boolean | undefined) => void) & (<K_1 extends keyof HTMLElementEventMap>(type: K_1, el: HTMLElement, handler: (e: HTMLElementEventMap[K_1]) => any, options?: EventListenerOptions | undefined) => void) & (<K_2 extends keyof WindowEventMap>(type: K_2, el: Window, handler: (e: WindowEventMap[K_2]) => any, useCapture?: boolean | undefined) => void) & (<K_3 extends keyof WindowEventMap>(type: K_3, el: Window, handler: (e: WindowEventMap[K_3]) => any, options?: EventListenerOptions | undefined) => void) & (<K_4 extends keyof DocumentEventMap>(type: K_4, el: Document, handler: (e: DocumentEventMap[K_4]) => any, useCapture?: boolean | undefined) => void) & (<K_5 extends keyof DocumentEventMap>(type: K_5, el: Document, handler: (e: DocumentEventMap[K_5]) => any, options?: EventListenerOptions | undefined) => void) & (<K_6 extends keyof TrapEventMap>(type: K_6, el: HTMLElement, handler: (e: TrapEventMap[K_6]) => any, useCapture?: boolean | undefined) => void) & (<K_7 extends keyof TrapEventMap>(type: K_7, el: HTMLElement, handler: (e: TrapEventMap[K_7]) => any, options?: EventListenerOptions | undefined) => void) & ((type: string, el: EventTarget, handler: EventListener, useCapture?: boolean | undefined) => void) & ((type: string, el: EventTarget, handler: EventListener, options?: EventListenerOptions | undefined) => void);
export { on, off };
